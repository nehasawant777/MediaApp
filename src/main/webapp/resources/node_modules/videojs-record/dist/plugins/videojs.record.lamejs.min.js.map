{"version":3,"sources":["webpack://VideojsRecord.[name]/webpack/universalModuleDefinition","webpack://VideojsRecord.[name]/webpack/bootstrap","webpack://VideojsRecord.[name]/./src/js/plugins/lamejs-plugin.js"],"names":["root","factory","exports","module","define","amd","window","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","r","value","n","__esModule","object","property","prototype","hasOwnProperty","p","s","RecordEngine","videojs","getComponent","LamejsEngine","stream","mediaType","debug","this","inputStream","audioType","config","sampleRate","bitRate","audioContext","AudioContext","audioSourceNode","createMediaStreamSource","processor","createScriptProcessor","engine","Worker","audioWorkerURL","onmessage","onWorkerMessage","bind","postMessage","cmd","onaudioprocess","onAudioProcess","connect","destination","disconnect","getAudioTracks","forEach","track","stop","close","then","catch","reason","ev","data","onStopRecording","Blob","buf","type","player","trigger","error","inputBuffer","getChannelData"],"mappings":";;;;;;;CAAA,SAAAA,EAAAC,GACA,iBAAAC,SAAA,iBAAAC,OACAA,OAAAD,QAAAD,IACA,mBAAAG,eAAAC,IACAD,OAAA,YAAAH,GACA,iBAAAC,QACAA,QAAA,OAAAD,KAEAD,EAAA,cAAAA,EAAA,kBAAqDA,EAAA,qBAAAC,KARrD,CASCK,OAAA,WACD,mBCTA,IAAAC,KAGA,SAAAC,EAAAC,GAGA,GAAAF,EAAAE,GACA,OAAAF,EAAAE,GAAAP,QAGA,IAAAC,EAAAI,EAAAE,IACAC,EAAAD,EACAE,GAAA,EACAT,YAUA,OANAU,EAAAH,GAAAI,KAAAV,EAAAD,QAAAC,IAAAD,QAAAM,GAGAL,EAAAQ,GAAA,EAGAR,EAAAD,QA2CA,OAtCAM,EAAAM,EAAAF,EAGAJ,EAAAO,EAAAR,EAGAC,EAAAQ,EAAA,SAAAd,EAAAe,EAAAC,GACAV,EAAAW,EAAAjB,EAAAe,IACAG,OAAAC,eAAAnB,EAAAe,GACAK,cAAA,EACAC,YAAA,EACAC,IAAAN,KAMAV,EAAAiB,EAAA,SAAAvB,GACAkB,OAAAC,eAAAnB,EAAA,cAAiDwB,OAAA,KAIjDlB,EAAAmB,EAAA,SAAAxB,GACA,IAAAe,EAAAf,KAAAyB,WACA,WAA2B,OAAAzB,EAAA,SAC3B,WAAiC,OAAAA,GAEjC,OADAK,EAAAQ,EAAAE,EAAA,IAAAA,GACAA,GAIAV,EAAAW,EAAA,SAAAU,EAAAC,GAAsD,OAAAV,OAAAW,UAAAC,eAAAnB,KAAAgB,EAAAC,IAGtDtB,EAAAyB,EAAA,GAIAzB,IAAA0B,EAAA,8UC9DA,IAAMC,EAAeC,QAAQC,aAAa,gBAQpCC,grBAAqBH,oCAIjBI,EAAQC,EAAWC,GACrBC,KAAKC,YAAcJ,EACnBG,KAAKF,UAAYA,EACjBE,KAAKD,MAAQA,EACbC,KAAKE,UAAY,YAEjB,IAAIC,GACAJ,MAAOC,KAAKD,MACZK,WAAYJ,KAAKI,WACjBC,QAASL,KAAKK,SAGlBL,KAAKM,aAAe,IAAIC,aACxBP,KAAKQ,gBAAkBR,KAAKM,aAAaG,wBACrCT,KAAKC,aACTD,KAAKU,UAAYV,KAAKM,aAAaK,sBAC/B,MAAO,EAAG,GAEdX,KAAKY,OAAS,IAAIC,OAAOb,KAAKc,gBAC9Bd,KAAKY,OAAOG,UAAYf,KAAKgB,gBAAgBC,KAAKjB,MAElDA,KAAKY,OAAOM,aAAaC,IAAK,OAAQhB,OAAQA,oCAO9CH,KAAKU,UAAUU,eAAiBpB,KAAKqB,eAAeJ,KAAKjB,MACzDA,KAAKQ,gBAAgBc,QAAQtB,KAAKU,WAClCV,KAAKU,UAAUY,QAAQtB,KAAKM,aAAaiB,4CAOzCvB,KAAKQ,gBAAgBgB,aACrBxB,KAAKU,UAAUc,aACfxB,KAAKU,UAAUU,eAAiB,KAChCpB,KAAKC,YAAYwB,iBAAiBC,QAAQ,SAAAC,GAAA,OAASA,EAAMC,SAEzD5B,KAAKM,aAAauB,QAAQC,KAAK,cAAUC,MAAM,SAACC,MAEhDhC,KAAKY,OAAOM,aAAaC,IAAK,mDAMlBc,GACZ,OAAQA,EAAGC,KAAKf,KACZ,IAAK,MACDnB,KAAKmC,gBAAgB,IAAIC,KAAKH,EAAGC,KAAKG,KACjCC,KAAMtC,KAAKE,aAChB,MAEJ,IAAK,QACDF,KAAKuC,SAASC,QAAQ,QAASP,EAAGC,KAAKO,OACvC,MAEJ,QAEIzC,KAAKuC,SAASC,QAAQ,QAASP,EAAGC,8CAS/BD,GAEX,IAAIC,EAAOD,EAAGS,YAAYC,eAAe,GAEzC3C,KAAKY,OAAOM,aAAaC,IAAK,SAAUkB,IAAKH,aAKrDxC,QAAQE,aAAeA,YAERA","file":"videojs.record.lamejs.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"lamejs\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"lamejs\"] = factory();\n\telse\n\t\troot[\"VideojsRecord\"] = root[\"VideojsRecord\"] || {}, root[\"VideojsRecord\"][\"lamejs\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 3);\n","/**\n * @file lamejs-plugin.js\n * @since 1.1.0\n */\n\nconst RecordEngine = videojs.getComponent('RecordEngine');\n\n/**\n * Audio-only engine for the lamejs library.\n *\n * @class\n * @augments videojs.RecordEngine\n */\nclass LamejsEngine extends RecordEngine {\n    /**\n     * Setup recording engine.\n     */\n    setup(stream, mediaType, debug) {\n        this.inputStream = stream;\n        this.mediaType = mediaType;\n        this.debug = debug;\n        this.audioType = 'audio/mp3';\n\n        let config = {\n            debug: this.debug,\n            sampleRate: this.sampleRate,\n            bitRate: this.bitRate\n        };\n\n        this.audioContext = new AudioContext();\n        this.audioSourceNode = this.audioContext.createMediaStreamSource(\n            this.inputStream);\n        this.processor = this.audioContext.createScriptProcessor(\n            16384, 1, 1);\n\n        this.engine = new Worker(this.audioWorkerURL);\n        this.engine.onmessage = this.onWorkerMessage.bind(this);\n\n        this.engine.postMessage({cmd: 'init', config: config});\n    }\n\n    /**\n     * Start recording.\n     */\n    start() {\n        this.processor.onaudioprocess = this.onAudioProcess.bind(this);\n        this.audioSourceNode.connect(this.processor);\n        this.processor.connect(this.audioContext.destination);\n    }\n\n    /**\n     * Stop recording.\n     */\n    stop() {\n        this.audioSourceNode.disconnect();\n        this.processor.disconnect();\n        this.processor.onaudioprocess = null;\n        this.inputStream.getAudioTracks().forEach(track => track.stop());\n        // ignore errors about already being closed\n        this.audioContext.close().then(() => {}).catch((reason) => {});\n\n        this.engine.postMessage({cmd: 'finish'});\n    }\n\n    /**\n     * Received a message from the worker.\n     */\n    onWorkerMessage(ev) {\n        switch (ev.data.cmd) {\n            case 'end':\n                this.onStopRecording(new Blob(ev.data.buf,\n                    {type: this.audioType}));\n                break;\n\n            case 'error':\n                this.player().trigger('error', ev.data.error);\n                break;\n\n            default:\n                // invalid message received\n                this.player().trigger('error', ev.data);\n                break;\n        }\n    }\n\n    /**\n     * Continuous encoding of audio data.\n     * @private\n     */\n    onAudioProcess(ev) {\n        // send microphone data to LAME for MP3 encoding while recording\n        let data = ev.inputBuffer.getChannelData(0);\n\n        this.engine.postMessage({cmd: 'encode', buf: data});\n    }\n}\n\n// expose plugin\nvideojs.LamejsEngine = LamejsEngine;\n\nexport default LamejsEngine;\n"],"sourceRoot":""}